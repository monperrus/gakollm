#!/usr/bin/python3

import argparse
import ellm 
import sys


ellm.VERBOSE = 0

# we need to use gpt-4-turbo to have large context window

def sanitize(x):
  if x.lower().startswith("yes"): return "yes"
  if x.lower().startswith("no"): return "no"
  return "unknown"


def check_vuln(code):
  output = ellm.get_llm_answer("```python\n"+code+"\n``` is there a vulnerability? answer only by yes/no.")
  print(output)
  answer = sanitize(output)
  return answer



def main():
    parser = argparse.ArgumentParser(description='Process some inputs.')

    parser.add_argument('--binary', type=str, required=False, help='Binary input')
    parser.add_argument('--cwe', type=str, required=False, help='CWE input')
    parser.add_argument('--explanation', type=str, required=False, help='Explanation input')
    parser.add_argument('--patch', type=str, required=False, help='Patch input')

    # args = parser.parse_args()

    if sys.argv[1]=="--binary":
        answer = check_vuln(open(sys.argv[2]).read())
        if answer == "yes":
          print(sys.argv[2]+ " is vulnerable")
        else:
          print(sys.argv[2]+ " is not vulnerable")
    if sys.argv[1]=="--cwe":
        cwe = ellm.get_llm_answer("```python\n"+open(sys.argv[2]).read()+"\n``` there is a vulnerability. give the Common Weakness Enumeration ID (CWE). give only the CWE.")
        print(cwe)
        print(ellm.get_llm_answer("explain briefly in one single sentence "+cwe))
        
    if sys.argv[1]=="--patch":
        cwe = ellm.get_llm_answer("```python\n"+open(sys.argv[2]).read()+"\n``` there is a vulnerability of type "+sys.argv[3]+" write the patch. write only the patch, in unified diff format.")

        print(cwe)

    # print(f'Binary: {args.binary}')
    # print(f'CWE: {args.cwe}')
    # print(f'Explanation: {args.explanation}')

if __name__ == '__main__':
    main()
